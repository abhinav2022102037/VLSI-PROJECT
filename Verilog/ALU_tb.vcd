$date
	Mon Nov  6 20:17:57 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module ALU_tb $end
$var wire 1 ! lesser $end
$var wire 1 " greater $end
$var wire 1 # equal $end
$var wire 1 $ carry $end
$var wire 4 % addersubtractor [3:0] $end
$var wire 4 & And [3:0] $end
$var reg 4 ' A [3:0] $end
$var reg 4 ( B [3:0] $end
$var reg 1 ) S0 $end
$var reg 1 * S1 $end
$scope module DUT $end
$var wire 4 + A [3:0] $end
$var wire 4 , B [3:0] $end
$var wire 1 - D_updated $end
$var wire 1 ) S0 $end
$var wire 1 * S1 $end
$var wire 1 $ carry $end
$var wire 1 . carry_temp2 $end
$var wire 1 # equal $end
$var wire 1 ! lesser $end
$var wire 1 " greater $end
$var wire 1 / equal_temp $end
$var wire 1 0 carry_temp $end
$var wire 4 1 S_3 [3:0] $end
$var wire 4 2 S_0 [3:0] $end
$var wire 1 3 D3 $end
$var wire 1 4 D2 $end
$var wire 1 5 D1 $end
$var wire 1 6 D0 $end
$var wire 4 7 B_3 [3:0] $end
$var wire 4 8 B_2 [3:0] $end
$var wire 4 9 B_0 [3:0] $end
$var wire 4 : A_3 [3:0] $end
$var wire 4 ; A_2 [3:0] $end
$var wire 4 < A_0 [3:0] $end
$scope module inst_1 $end
$var wire 4 = A_in [3:0] $end
$var wire 4 > B_in [3:0] $end
$var wire 1 - enable $end
$var wire 4 ? B_out [3:0] $end
$var wire 4 @ A_out [3:0] $end
$upscope $end
$scope module inst_2 $end
$var wire 4 A A_in [3:0] $end
$var wire 4 B B_in [3:0] $end
$var wire 1 4 enable $end
$var wire 4 C B_out [3:0] $end
$var wire 4 D A_out [3:0] $end
$upscope $end
$scope module inst_3 $end
$var wire 4 E A_in [3:0] $end
$var wire 4 F B_in [3:0] $end
$var wire 1 3 enable $end
$var wire 4 G B_out [3:0] $end
$var wire 4 H A_out [3:0] $end
$upscope $end
$scope module inst_4 $end
$var wire 4 I A [3:0] $end
$var wire 4 J B [3:0] $end
$var wire 1 ) M $end
$var wire 1 0 carry $end
$var wire 4 K S [3:0] $end
$var wire 1 L C3 $end
$var wire 1 M C2 $end
$var wire 1 N C1 $end
$var wire 4 O B_updated [3:0] $end
$scope module instance_1 $end
$var wire 1 P A $end
$var wire 1 Q B $end
$var wire 1 N C $end
$var wire 1 ) C_in $end
$var wire 1 R C_inter1 $end
$var wire 1 S C_inter2 $end
$var wire 1 T S $end
$var wire 1 U S_inter $end
$upscope $end
$scope module instance_2 $end
$var wire 1 V A $end
$var wire 1 W B $end
$var wire 1 M C $end
$var wire 1 N C_in $end
$var wire 1 X C_inter1 $end
$var wire 1 Y C_inter2 $end
$var wire 1 Z S $end
$var wire 1 [ S_inter $end
$upscope $end
$scope module instance_3 $end
$var wire 1 \ A $end
$var wire 1 ] B $end
$var wire 1 L C $end
$var wire 1 M C_in $end
$var wire 1 ^ C_inter1 $end
$var wire 1 _ C_inter2 $end
$var wire 1 ` S $end
$var wire 1 a S_inter $end
$upscope $end
$scope module instance_4 $end
$var wire 1 b A $end
$var wire 1 c B $end
$var wire 1 0 C $end
$var wire 1 L C_in $end
$var wire 1 d C_inter1 $end
$var wire 1 e C_inter2 $end
$var wire 1 f S $end
$var wire 1 g S_inter $end
$upscope $end
$upscope $end
$scope module inst_5 $end
$var wire 4 h A [3:0] $end
$var wire 4 i B [3:0] $end
$var wire 1 j eq0 $end
$var wire 1 k eq1 $end
$var wire 1 l eq2 $end
$var wire 1 m eq3 $end
$var wire 1 / equal $end
$var wire 1 " greater $end
$var wire 1 n greater0 $end
$var wire 1 o greater1 $end
$var wire 1 p greater2 $end
$var wire 1 q greater3 $end
$var wire 1 ! lesser $end
$var wire 1 r lesser0 $end
$var wire 1 s lesser1 $end
$var wire 1 t lesser2 $end
$var wire 1 u lesser3 $end
$var wire 4 v B_comp [3:0] $end
$var wire 4 w A_comp [3:0] $end
$upscope $end
$scope module inst_6 $end
$var wire 4 x A [3:0] $end
$var wire 4 y B [3:0] $end
$var wire 4 z C [3:0] $end
$upscope $end
$scope module instance_1 $end
$var wire 1 6 D0 $end
$var wire 1 5 D1 $end
$var wire 1 4 D2 $end
$var wire 1 3 D3 $end
$var wire 1 ) S0 $end
$var wire 1 { S0_comp $end
$var wire 1 * S1 $end
$var wire 1 | S1_comp $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0|
0{
b1001 z
b1001 y
b1101 x
b1111 w
b1111 v
0u
0t
0s
0r
0q
0p
0o
0n
1m
1l
1k
1j
b0 i
b0 h
1g
0f
1e
0d
1c
0b
1a
0`
1_
0^
1]
0\
1[
0Z
1Y
0X
1W
0V
1U
0T
1S
0R
1Q
0P
b1111 O
1N
1M
1L
b0 K
b0 J
b0 I
b1101 H
b1001 G
b1001 F
b1101 E
b0 D
b0 C
b1001 B
b1101 A
b0 @
b0 ?
b1001 >
b1101 =
b0 <
b0 ;
b1101 :
b0 9
b0 8
b1001 7
06
05
04
13
b0 2
b1001 1
10
1/
0.
0-
b1001 ,
b1101 +
1*
1)
b1001 (
b1101 '
b1001 &
b0 %
0$
0#
0"
0!
$end
#10
b0 &
b0 1
b0 z
b1011 7
b1011 G
b1011 y
b100 :
b100 H
b100 x
b1011 (
b1011 ,
b1011 >
b1011 B
b1011 F
b100 '
b100 +
b100 =
b100 A
b100 E
#20
b110 &
b110 1
b110 z
b1111 7
b1111 G
b1111 y
b110 :
b110 H
b110 x
b1111 (
b1111 ,
b1111 >
b1111 B
b1111 F
b110 '
b110 +
b110 =
b110 A
b110 E
#30
b100 &
b100 1
b100 z
b1101 7
b1101 G
b1101 y
b1101 (
b1101 ,
b1101 >
b1101 B
b1101 F
#40
b1000 &
b1000 1
b1000 z
b1000 7
b1000 G
b1000 y
b1000 :
b1000 H
b1000 x
b1000 (
b1000 ,
b1000 >
b1000 B
b1000 F
b1000 '
b1000 +
b1000 =
b1000 A
b1000 E
#50
b1100 &
b1100 1
b1100 z
b1100 7
b1100 G
b1100 y
b1101 :
b1101 H
b1101 x
b1100 (
b1100 ,
b1100 >
b1100 B
b1100 F
b1101 '
b1101 +
b1101 =
b1101 A
b1101 E
#60
b0 &
b0 1
b0 z
b0 7
b0 G
b0 y
b0 :
b0 H
b0 x
b0 (
b0 ,
b0 >
b0 B
b0 F
b0 '
b0 +
b0 =
b0 A
b0 E
#70
b1100 7
b1100 G
b1100 y
b11 :
b11 H
b11 x
b1100 (
b1100 ,
b1100 >
b1100 B
b1100 F
b11 '
b11 +
b11 =
b11 A
b11 E
#80
b1010 &
b1010 1
b1010 z
b1010 7
b1010 G
b1010 y
b1011 :
b1011 H
b1011 x
b1010 (
b1010 ,
b1010 >
b1010 B
b1010 F
b1011 '
b1011 +
b1011 =
b1011 A
b1011 E
#90
